Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Mydataset import MyOwnDataset\nfrom MyDSS import MyOwnDSSNet\nfrom MyTrain import Train_DSS\nfrom MyCreateData import CreateData\nimport argparse\nimport sys\nimport torch\nimport os\nimport shutil\nfrom torch_geometric.data import DataListLoader\nfrom torch_geometric.data import DataLoader\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-e', '--n_epoch', help='epoch number', type=int, default=50)\nparser.add_argument('-r', '--restart', type=eval, default=False, choices=[True, False], help='Restart training option')\nparser.add_argument('-tcase', '--traincase', help='train cases', nargs=\"+\", default=['40'])\nparser.add_argument('-vcase', '--valcase', help='validation cases', nargs=\"+\", default=['40'])\nparser.add_argument('-n_out', '--n_output', help='output each n_out epoch', type=int, default=10)\n\nargs = parser.parse_args()\n\nn_epoch = args.n_epoch\nrestart = args.restart\ntrain_cases = args.traincase\nval_cases = args.valcase\nn_output = args.n_output\n\n# train_cases = ['40','50','60','70','80','90','100','120','130','140','150']\n# train_cases = ['40']\n# val_cases = ['40']\n# test_cases = ['110']\n\n## Copy Mesh file in Results - needed for plot ##\nfor i in val_cases:\n    src = os.path.join(\"../Dataset\", i, \"Mesh.h5\")\n    dst = \"./Results/Mesh.h5\"\n    shutil.copyfile(src, dst)\n\n## Setting blank for new execution ##\nif not restart:\n    if os.path.exists(\"./dataset/processed/data_val.pt\"):\n        os.remove(\"./dataset/processed/data_val.pt\")\n    if os.path.exists(\"./dataset/processed/data_train.pt\"):\n        os.remove(\"./dataset/processed/data_train.pt\")\n    if os.path.exists(\"./dataset/processed/pre_filter.pt\"):\n        os.remove(\"./dataset/processed/pre_filter.pt\")\n    if os.path.exists(\"./dataset/processed/pre_transform.pt\"):\n        os.remove(\"./dataset/processed/pre_transform.pt\")\n    if os.path.exists(\"./Model/best_model.pt\"):\n        os.remove(\"./Model/best_model.pt\")\n    if os.path.exists(\"./Model/best_model_normal_final.pt\"):\n        os.remove(\"./Model/best_model_normal_final.pt\")\n\nprint(\"#################### DATA ADAPTING FOR GNN #######################\")\n# createdata = CreateData()\n# createdata.transform(train_cases, 'train')\n# createdata.transform(val_cases, 'val')\n\n#check if gpu is available\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint('Running on : ', device)\n\n\nprint(\"#################### CREATING Inner DATASET #######################\")\nloader_train = MyOwnDataset(root='./dataset', mode='train', cases=train_cases, device=device)\nloader_val = MyOwnDataset(root='./dataset', mode='val', cases=val_cases, device=device)\n\n#initialize the created dataset\nloader_train = DataLoader(loader_train) #opt args: shuffle, batchsize\nloader_val = DataLoader(loader_val)\n\nprint(\"#################### DSS NET parameter #######################\")\n#create hyperparameter\nlatent_dimension = 32\nprint(\"Latent space dim : \", latent_dimension)\nk = 40\nprint(\"Number of updates : \", k)\ngamma = 0.1\nprint(\"Gamma (loss function) : \", gamma)\n# alpha = 1e-1\nalpha = 0.1\nprint(\"Alpha (reduction correction) :\", alpha)\nlr = 3e-3\nprint(\"LR (Learning rate):\", lr)\n\n##create folder for different results ##\nset_name = str(k) + '-' + str(latent_dimension).replace(\".\", \"\") + '-' + str(alpha).replace(\".\", \"\") + '-' + str(\n    lr).replace(\".\", \"\")\nprint(\"PARAMETER SET: k:{}, laten_dim:{}, alpha:{}, lr:{}\".format(str(k), str(latent_dimension), str(alpha), str(lr)))\nos.makedirs(\"./Results/\" + set_name, exist_ok=True)\nos.makedirs(\"./Stats/\" + set_name, exist_ok=True)\n\n\nprint(\"#################### CREATING NETWORKS #######################\")\nDSS = MyOwnDSSNet(latent_dimension = latent_dimension, k = k, gamma = gamma, alpha = alpha, device=device)\n# # # DSS = DataParallel(DSS)\nDSS = DSS.to(device)\n# # #DSS = DSS.double()\n\nprint(\"#################### TRAINING #######################\")\ntrain_dss = Train_DSS(net=DSS, learning_rate=lr, n_epochs=n_epoch, device=device, set_name=set_name)\n\noptimizer, scheduler, epoch, min_val_loss = train_dss.createOptimizerAndScheduler()\n\nif restart:\n    optimizer, scheduler, epoch, min_val_loss = train_dss.restart(optimizer, scheduler, path='Model/best_model.pt')\n\nfor epoch in range(epoch, n_epoch):\n    GNN, validation_loss = train_dss.trainDSS(loader_train, loader_val, optimizer, scheduler, min_val_loss, epoch, k, n_output)\n\nsys.stdout.flush()\n\ndel DSS, GNN, loader_val, loader_train, optimizer, scheduler\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.py b/Main.py
--- a/Main.py	(revision 61c68f2eafbe7bc717ca2460552a529e0f9e3af5)
+++ b/Main.py	(date 1649667193367)
@@ -7,10 +7,8 @@
 import torch
 import os
 import shutil
-from torch_geometric.data import DataListLoader
 from torch_geometric.data import DataLoader
 
-
 parser = argparse.ArgumentParser()
 parser.add_argument('-e', '--n_epoch', help='epoch number', type=int, default=50)
 parser.add_argument('-r', '--restart', type=eval, default=False, choices=[True, False], help='Restart training option')
